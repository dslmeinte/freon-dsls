// Generated by the ProjectIt Language Generator.
import { LIonCoreEveryConcept } from "../../language/gen";
import { MetamodelElement, Metamodel, Metamodels } from "../../language/gen";
import { LIonCoreWorker } from "./LIonCoreWorker";
import { PiLogger } from "@projectit/core";

const LOGGER = new PiLogger("LIonCoreWalker");

/**
 * Class LIonCoreWalker implements the extended visitor pattern of instances of language LIonCore.
 * This class implements the traversal of the model tree, classes that implement LIonCoreWorker
 * are responsible for the actual work being done on the nodes of the tree.
 * Every node is visited twice, once before the visit of its children, and once after this visit.
 *
 * With the use of the parameter 'includeChildren', which takes a function, a very fine-grained control can be taken
 * over which nodes are and are not visited.
 */
export class LIonCoreWalker {
    myWorkers: LIonCoreWorker[] = []; // the instances that do the actual work on each node of the tree

    /**
     * This method is the entry point of the traversal through the model tree. Each of the workers will be called in
     * the order in which they are present in the array 'myWorkers'. If, for a tree node, a worker returns 'false',
     * none of the rest of the workers will be called. For that particular node both the 'execBefore' and 'execAfter'
     * method of any of the other workers will be skipped.
     *
     * @param modelelement the top node of the part of the tree to be visited
     * @param includeChildren if true, the children of 'modelelement' will also be visited
     */
    public walk(modelelement: LIonCoreEveryConcept, includeChildren?: (elem: LIonCoreEveryConcept) => boolean) {
        if (this.myWorkers.length > 0) {
            if (modelelement instanceof MetamodelElement) {
                return this.walkMetamodelElement(modelelement, includeChildren);
            }
            if (modelelement instanceof Metamodel) {
                return this.walkMetamodel(modelelement, includeChildren);
            }
            if (modelelement instanceof Metamodels) {
                return this.walkMetamodels(modelelement, includeChildren);
            }
        } else {
            LOGGER.error(this, "No worker found.");
        }
    }

    private walkMetamodelElement(modelelement: MetamodelElement, includeChildren?: (elem: LIonCoreEveryConcept) => boolean) {
        let stopWalkingThisNode: boolean = false;
        for (const worker of this.myWorkers) {
            if (!stopWalkingThisNode) {
                stopWalkingThisNode = worker.execBeforeMetamodelElement(modelelement);
            }
        }

        for (let worker of this.myWorkers) {
            if (!stopWalkingThisNode) {
                stopWalkingThisNode = worker.execAfterMetamodelElement(modelelement);
            }
        }
    }

    private walkMetamodel(modelelement: Metamodel, includeChildren?: (elem: LIonCoreEveryConcept) => boolean) {
        let stopWalkingThisNode: boolean = false;
        for (const worker of this.myWorkers) {
            if (!stopWalkingThisNode) {
                stopWalkingThisNode = worker.execBeforeMetamodel(modelelement);
            }
        }
        // work on children in the model tree
        modelelement.elements.forEach(p => {
            if (!(includeChildren === undefined) && includeChildren(p)) {
                this.walk(p, includeChildren);
            }
        });

        for (let worker of this.myWorkers) {
            if (!stopWalkingThisNode) {
                stopWalkingThisNode = worker.execAfterMetamodel(modelelement);
            }
        }
    }

    private walkMetamodels(modelelement: Metamodels, includeChildren?: (elem: LIonCoreEveryConcept) => boolean) {
        let stopWalkingThisNode: boolean = false;
        for (const worker of this.myWorkers) {
            if (!stopWalkingThisNode) {
                stopWalkingThisNode = worker.execBeforeMetamodels(modelelement);
            }
        }
        // work on children in the model tree
        modelelement.metamodels.forEach(p => {
            if (!(includeChildren === undefined) && includeChildren(p)) {
                this.walk(p, includeChildren);
            }
        });

        for (let worker of this.myWorkers) {
            if (!stopWalkingThisNode) {
                stopWalkingThisNode = worker.execAfterMetamodels(modelelement);
            }
        }
    }
}
