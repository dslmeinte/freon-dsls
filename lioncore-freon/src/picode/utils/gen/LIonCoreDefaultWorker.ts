// Generated by the ProjectIt Language Generator.
import { Metamodel, MetamodelElement, Metamodels } from "../../language/gen";
import { LIonCoreWorker } from "./LIonCoreWorker";

/**
 * Class LIonCoreDefaultWorker is part of the implementation of the visitor pattern on models.
 * It implements the interface LIonCoreWorker with empty methods, and can thus be used as
 * base to any class that needs to traverse the model tree.
 * Class LIonCoreWalker implements the traversal of the model tree. This class implements
 * the actual visiting of each node in the tree.
 */
export class LIonCoreDefaultWorker implements LIonCoreWorker {
    /**
     * Visits 'modelelement' before visiting its children.
     * @param modelelement
     */
    public execBeforeMetamodels(modelelement: Metamodels): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' after visiting its children.
     * @param modelelement
     */
    public execAfterMetamodels(modelelement: Metamodels): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' before visiting its children.
     * @param modelelement
     */
    public execBeforeMetamodel(modelelement: Metamodel): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' after visiting its children.
     * @param modelelement
     */
    public execAfterMetamodel(modelelement: Metamodel): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' before visiting its children.
     * @param modelelement
     */
    public execBeforeMetamodelElement(modelelement: MetamodelElement): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' after visiting its children.
     * @param modelelement
     */
    public execAfterMetamodelElement(modelelement: MetamodelElement): boolean {
        return false;
    }
}
