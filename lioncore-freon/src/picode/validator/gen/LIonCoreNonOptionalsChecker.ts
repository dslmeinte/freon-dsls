// Generated by the ProjectIt Language Generator.
import { PiError, PiErrorSeverity, PiWriter, LanguageEnvironment } from "@projectit/core";
import { Metamodel, MetamodelElement, Metamodels } from "../../language/gen";
import { LIonCoreDefaultWorker } from "../../utils/gen";
import { LIonCoreCheckerInterface } from "./LIonCoreValidator";

/**
 * Class LIonCoreNonOptionalsChecker is part of the implementation of the default validator.
 * It checks whether non-optional properties, as such defined in the .ast definition, indeed
 * have a value.
 * Class LIonCoreWalker implements the traversal of the model tree. This class implements
 * the actual checking of each node in the tree.
 */
export class LIonCoreNonOptionalsChecker extends LIonCoreDefaultWorker implements LIonCoreCheckerInterface {
    // 'myWriter' is used to provide error messages on the nodes in the model tree
    myWriter: PiWriter = LanguageEnvironment.getInstance().writer;
    // 'errorList' holds the errors found while traversing the model tree
    errorList: PiError[] = [];

    /**
     * Checks 'modelelement' before checking its children.
     * Found errors are pushed onto 'errorlist'.
     * If an error is found, it is considered 'fatal', which means that no other checks on
     * 'modelelement' are performed.
     *
     * @param modelelement
     */
    public execBeforeMetamodels(modelelement: Metamodels): boolean {
        let hasFatalError: boolean = false;
        if (modelelement.name === null || modelelement.name === undefined || modelelement.name?.length == 0) {
            hasFatalError = true;
            this.errorList.push(new PiError("Property 'name' must have a value", modelelement, modelelement.name, PiErrorSeverity.Error));
        }

        return hasFatalError;
    }

    /**
     * Checks 'modelelement' before checking its children.
     * Found errors are pushed onto 'errorlist'.
     * If an error is found, it is considered 'fatal', which means that no other checks on
     * 'modelelement' are performed.
     *
     * @param modelelement
     */
    public execBeforeMetamodel(modelelement: Metamodel): boolean {
        let hasFatalError: boolean = false;
        if (modelelement.qualifiedName === null || modelelement.qualifiedName === undefined || modelelement.qualifiedName?.length == 0) {
            hasFatalError = true;
            this.errorList.push(
                new PiError("Property 'qualifiedName' must have a value", modelelement, modelelement.name, PiErrorSeverity.Error)
            );
        }
        if (modelelement.name === null || modelelement.name === undefined || modelelement.name?.length == 0) {
            hasFatalError = true;
            this.errorList.push(new PiError("Property 'name' must have a value", modelelement, modelelement.name, PiErrorSeverity.Error));
        }

        return hasFatalError;
    }
}
