// Generated by the ProjectIt Language Generator.
import { PiError, PiErrorSeverity, PiWriter, PiElementReference, PiNamedElement, LanguageEnvironment } from "@projectit/core";
import { LIonCoreEveryConcept } from "../../language/gen";
import { LIonCoreDefaultWorker } from "../../utils/gen";
import { LIonCoreCheckerInterface } from "./LIonCoreValidator";

/**
 * Class LIonCoreReferenceChecker is part of the implementation of the default validator.
 * It checks whether references can be found within the model.
 *
 * Class LIonCoreWalker implements the traversal of the model tree. This class implements
 * the actual checking of each node in the tree.
 */
export class LIonCoreReferenceChecker extends LIonCoreDefaultWorker implements LIonCoreCheckerInterface {
    // 'myWriter' is used to provide error messages on the nodes in the model tree
    myWriter: PiWriter = LanguageEnvironment.getInstance().writer;
    // 'errorList' holds the errors found while traversing the model tree
    errorList: PiError[] = [];
    private refSeparator: string = "/";

    private makeErrorMessage(
        modelelement: LIonCoreEveryConcept,
        referredElem: PiElementReference<PiNamedElement>,
        propertyName: string,
        locationDescription: string
    ) {
        const scoper = LanguageEnvironment.getInstance().scoper;
        const possibles = scoper.getVisibleElements(modelelement).filter(elem => elem.name === referredElem.name);
        if (possibles.length > 0) {
            this.errorList.push(
                new PiError(
                    `Reference '${referredElem.pathnameToString(this.refSeparator)}' should have type '${
                        referredElem.typeName
                    }', but found type(s) [${possibles.map(elem => `${elem.piLanguageConcept()}`).join(", ")}]`,
                    modelelement,
                    `${propertyName} of ${locationDescription}`,
                    PiErrorSeverity.Error
                )
            );
        } else {
            this.errorList.push(
                new PiError(
                    `Cannot find reference '${referredElem.pathnameToString(this.refSeparator)}'`,
                    modelelement,
                    `${propertyName} of ${locationDescription}`,
                    PiErrorSeverity.Error
                )
            );
        }
    }
}
