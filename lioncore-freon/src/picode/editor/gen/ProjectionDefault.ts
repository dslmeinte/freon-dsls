// Generated by the ProjectIt Language Generator.
import { observable, makeObservable } from "mobx";

import {
    PiProjection,
    PiElementReference,
    PiCompositeProjection,
    PiElement,
    LanguageEnvironment,
    PiTableDefinition,
    Box,
    BoxUtils,
    BoxFactory
} from "@projectit/core";

import { Metamodel } from "../../language/gen";

/**
 * Class ProjectionDefault implements the projections for elements of
 * language LIonCore defined in the editor named default.
 * These are merged with the custom build additions and other definition-based editor parts
 * in a three-way manner. For each modelelement,
 * (1) if a custom build creator/behavior is present, this is used,
 * (2) if a creator/behavior based on one of the editor definition is present, this is used,
 * (3) if neither (1) nor (2) yields a result, the default is used.
 */
export class ProjectionDefault implements PiProjection {
    rootProjection: PiCompositeProjection;
    showBrackets: boolean = false;
    name: string = "default";
    isEnabled: boolean = true;

    constructor() {
        makeObservable(this, {
            showBrackets: observable,
            isEnabled: observable
        });
    }

    getBox(element: PiElement, nameOfSuper?: string): Box {
        if (element === null) {
            return null;
        }

        let boxType: string = element.piLanguageConcept();
        if (!!nameOfSuper && nameOfSuper.length > 0) {
            if (!this.rootProjection.checkSuper(nameOfSuper, element.piLanguageConcept())) {
                throw new Error(
                    `A box requested for '${nameOfSuper}', which is not a super class or interface of '${element.piLanguageConcept()}'`
                );
            } else {
                boxType = nameOfSuper;
            }
        }

        switch (boxType) {
            case "Metamodel":
                return this.getMetamodelBox(element as Metamodel);
        }
        // nothing fits
        throw new Error("No box defined for this expression:" + element.piId());
    }

    getTableDefinition(conceptName: string): PiTableDefinition {
        if (conceptName === null || conceptName.length === 0) {
            return null;
        }

        switch (conceptName) {
        }
        // nothing fits
        return null;
    }

    public getMetamodelBox(metamodel: Metamodel): Box {
        return BoxFactory.verticalList(metamodel, "Metamodel-overall", [
            BoxFactory.horizontalList(
                metamodel,
                "Metamodel-hlist-line-0",
                [BoxUtils.labelBox(metamodel, "metamodel", "top-1-line-0-item-0"), BoxUtils.textBox(metamodel, "qualifiedName")],
                { selectable: true }
            ),
            BoxUtils.indentBox(metamodel, 4, "1", BoxUtils.verticalPartListBox(metamodel, "elements", this.rootProjection, null))
        ]);
    }
}
