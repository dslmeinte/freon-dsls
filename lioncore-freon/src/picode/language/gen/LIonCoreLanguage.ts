// Generated by the ProjectIt Language Generator.
import { Language, Model, ModelUnit, Property, Concept, Interface, PiElementReference } from "@projectit/core";

import { Metamodels, Metamodel, MetamodelElement } from "./internal";

/**
 * Creates an in-memory representation of structure of the language metamodel, used in e.g. the (de)serializer.
 */
export function initializeLanguage() {
    Language.getInstance().name = "LIonCore";
    Language.getInstance().addModel(describeMetamodels());
    Language.getInstance().addUnit(describeMetamodel());
    Language.getInstance().addConcept(describeMetamodelElement());

    Language.getInstance().addReferenceCreator((name: string, type: string) => {
        return !!name ? PiElementReference.create(name, type) : null;
    });
}

function describeMetamodels(): Model {
    const model = {
        typeName: "Metamodels",
        isNamespace: true,
        constructor: () => {
            return new Metamodels();
        },
        properties: new Map<string, Property>()
    };
    model.properties.set("name", {
        name: "name",
        type: "string",
        isList: false,
        isPublic: true,
        propertyKind: "primitive"
    });
    model.properties.set("metamodels", {
        name: "metamodels",
        type: "Metamodel",
        isList: true,
        isPublic: true,
        propertyKind: "part"
    });

    return model;
}

function describeMetamodel(): ModelUnit {
    const modelunit = {
        typeName: "Metamodel",
        isNamedElement: true,
        fileExtension: "met",
        constructor: () => {
            return new Metamodel();
        },
        properties: new Map<string, Property>()
    };
    modelunit.properties.set("qualifiedName", {
        name: "qualifiedName",
        type: "string",
        isList: false,
        isPublic: true,
        propertyKind: "primitive"
    });
    modelunit.properties.set("name", {
        name: "name",
        type: "string",
        isList: false,
        isPublic: true,
        propertyKind: "primitive"
    });
    modelunit.properties.set("elements", {
        name: "elements",
        type: "MetamodelElement",
        isList: true,
        isPublic: true,
        propertyKind: "part"
    });

    return modelunit;
}

function describeMetamodelElement(): Concept {
    const concept = {
        typeName: "MetamodelElement",
        isAbstract: true,
        isPublic: undefined,
        isNamedElement: false,
        trigger: "MetamodelElement",
        constructor: () => {
            return null;
        },
        properties: new Map<string, Property>(),
        baseName: null,
        subConceptNames: []
    };

    return concept;
}
