// Generated by the ProjectIt Language Generator.
import {
    MobxModelElementImpl,
    observablelistpart,
    PiModel,
    Language,
    PiUtils,
    PiParseLocation,
    matchElementList,
    matchPrimitiveList,
    matchReferenceList
} from "@projectit/core";
import { LIonCoreModelUnitType, Metamodel, LIonCoreMetaType } from "./internal";

/**
 * Class Metamodels is the implementation of the model with the same name in the language definition file.
 * It uses mobx decorators to enable parts of the language environment, e.g. the editor, to react
 * to changes in the state of its properties.
 */
export class Metamodels extends MobxModelElementImpl implements PiModel {
    /**
     * A convenience method that creates an instance of this class
     * based on the properties defined in 'data'.
     * @param data
     */
    static create(data: Partial<Metamodels>): Metamodels {
        const result = new Metamodels();
        if (!!data.name) {
            result.name = data.name;
        }
        if (!!data.metamodels) {
            data.metamodels.forEach(x => result.metamodels.push(x));
        }
        if (!!data.parse_location) {
            result.parse_location = data.parse_location;
        }
        return result;
    }

    readonly $typename: LIonCoreMetaType = "Metamodels"; // holds the metatype in the form of a string
    $id: string; // a unique identifier
    parse_location: PiParseLocation; // if relevant, the location of this element within the source from which it is parsed
    name: string = ""; // implementation of name
    metamodels: Metamodel[]; // implementation of part 'metamodels'

    constructor(id?: string) {
        super();
        if (!!id) {
            this.$id = id;
        } else {
            this.$id = PiUtils.ID(); // uuid.v4();
        }

        // both 'observablepart' and 'observablelistpart' change the get and set of an attribute
        // such that the parent-part relationship is consistently maintained,
        // and make sure the part is observable
        observablelistpart(this, "metamodels");
    }

    /**
     * Returns the metatype of this instance in the form of a string.
     */
    piLanguageConcept(): LIonCoreMetaType {
        return this.$typename;
    }

    /**
     * Returns the unique identifier of this instance.
     */
    piId(): string {
        return this.$id;
    }

    /**
     * Returns true if this instance is a model concept.
     */
    piIsModel(): boolean {
        return true;
    }

    /**
     * Returns true if this instance is a model unit.
     */
    piIsUnit(): boolean {
        return false;
    }

    /**
     * Returns true if this instance is an expression concept.
     */
    piIsExpression(): boolean {
        return false;
    }

    /**
     * Returns true if this instance is a binary expression concept.
     */
    piIsBinaryExpression(): boolean {
        return false;
    }
    /**
     * Matches a partial instance of this class to this object
     * based on the properties defined in the partial.
     * @param toBeMatched
     */
    public match(toBeMatched: Partial<Metamodels>): boolean {
        let result: boolean = true;
        if (result && toBeMatched.name !== null && toBeMatched.name !== undefined && toBeMatched.name.length > 0) {
            result = result && this.name === toBeMatched.name;
        }
        if (result && !!toBeMatched.metamodels) {
            result = result && matchElementList(this.metamodels, toBeMatched.metamodels);
        }
        return result;
    }

    /**
     * A convenience method that finds a unit of this model based on its name and 'metatype'.
     * @param name
     * @param metatype
     */
    findUnit(name: string, metatype?: LIonCoreMetaType): LIonCoreModelUnitType {
        let result: LIonCoreModelUnitType = null;
        result = this.metamodels.find(mod => mod.name === name);
        if (!!result && !!metatype) {
            if (Language.getInstance().metaConformsToType(result, metatype)) {
                return result;
            }
        } else {
            return result;
        }
        return null;
    }

    /**
     * Replaces a model unit by a new one. Used for swapping between complete units and unit public interfaces.
     * Returns false if the replacement could not be done, e.g. because 'oldUnit' is not a child of this object.
     * @param oldUnit
     * @param newUnit
     */
    replaceUnit(oldUnit: LIonCoreModelUnitType, newUnit: LIonCoreModelUnitType): boolean {
        if (oldUnit.piLanguageConcept() !== newUnit.piLanguageConcept()) {
            return false;
        }
        if (oldUnit.piOwnerDescriptor().owner !== this) {
            return false;
        }
        // we must store the interface in the same place as the old unit, which info is held in PiContainer()
        if (oldUnit.piLanguageConcept() === "Metamodel" && oldUnit.piOwnerDescriptor().propertyName === "metamodels") {
            const index = this.metamodels.indexOf(oldUnit as Metamodel);
            this.metamodels.splice(index, 1, newUnit as Metamodel);
        } else {
            return false;
        }
        return true;
    }

    /**
     * Adds a model unit. Returns false if anything goes wrong.
     *
     * @param newUnit
     */
    addUnit(newUnit: LIonCoreModelUnitType): boolean {
        if (!!newUnit) {
            const myMetatype = newUnit.piLanguageConcept();
            switch (myMetatype) {
                case "Metamodel": {
                    this.metamodels.push(newUnit as Metamodel);
                    return true;
                }
            }
        }
        return false;
    }

    /**
     * Removes a model unit. Returns false if anything goes wrong.
     *
     * @param oldUnit
     */
    removeUnit(oldUnit: LIonCoreModelUnitType): boolean {
        if (!!oldUnit) {
            const myMetatype = oldUnit.piLanguageConcept();
            switch (myMetatype) {
                case "Metamodel": {
                    this.metamodels.splice(this.metamodels.indexOf(oldUnit as Metamodel), 1);
                    return true;
                }
            }
        }
        return false;
    }

    /**
     * Returns an empty model unit of type 'unitTypeName' within 'model'.
     *
     * @param model
     * @param unitTypeName
     */
    newUnit(typename: LIonCoreMetaType): LIonCoreModelUnitType {
        switch (typename) {
            case "Metamodel": {
                const unit: Metamodel = new Metamodel();
                this.metamodels.push(unit as Metamodel);
                return unit;
            }
        }
        return null;
    }

    /**
     * Returns a list of model units.
     */
    getUnits(): LIonCoreModelUnitType[] {
        let result: LIonCoreModelUnitType[] = [];
        result = result.concat(this.metamodels);
        return result;
    }

    /**
     * Returns a list of model units of type 'type'.
     */
    getUnitsForType(type: string): LIonCoreModelUnitType[] {
        switch (type) {
            case "Metamodel": {
                return this.metamodels;
            }
        }
        return [];
    }
}
