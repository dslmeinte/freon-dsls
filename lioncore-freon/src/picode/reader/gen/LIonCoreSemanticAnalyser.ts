// Generated by the ProjectIt Language Generator.
import { LIonCoreEveryConcept } from "../../language/gen";
import { LIonCoreWalker } from "../../utils/gen";
import { LIonCoreSemanticAnalysisWalker } from "./LIonCoreSemanticAnalysisWalker";
import { Concept, Language, PiElement, PiElementReference } from "@projectit/core";

export class LIonCoreSemanticAnalyser {
    public correct(modelunit: LIonCoreEveryConcept) {
        let changesToBeMade: Map<LIonCoreEveryConcept, LIonCoreEveryConcept> = new Map<LIonCoreEveryConcept, LIonCoreEveryConcept>();
        // create the walker over the model tree
        const myWalker = new LIonCoreWalker();

        // create the object that will find what needs ot be changed
        let myCorrector = new LIonCoreSemanticAnalysisWalker(changesToBeMade);

        // and add the corrector to the walker
        myWalker.myWorkers.push(myCorrector);

        // do the work
        myWalker.walk(modelunit, () => {
            return true;
        });

        // now change all ref errors
        for (const [toBeReplaced, newObject] of changesToBeMade) {
            const myType: Concept = Language.getInstance().concept(toBeReplaced.piLanguageConcept());
            myType.properties.forEach(prop => {
                if (prop.type !== "boolean" && !!toBeReplaced[prop.name]) {
                    newObject[prop.name] = toBeReplaced[prop.name];
                }
            });
            let parent: PiElement = toBeReplaced.piOwnerDescriptor().owner;
            const propName: string = toBeReplaced.piOwnerDescriptor().propertyName;
            const propIndex: number = toBeReplaced.piOwnerDescriptor().propertyIndex;
            if (propIndex !== undefined) {
                parent[propName].splice(propIndex, 1, newObject);
            } else {
                parent[propName] = newObject;
            }
        }
    }
}
