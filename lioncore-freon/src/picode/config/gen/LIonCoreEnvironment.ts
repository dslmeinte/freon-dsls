// Generated by the ProjectIt Language Generator.
import {
    PiEditor,
    PiCompositeProjection,
    PiEnvironment,
    PiReader,
    PiScoper,
    PiTyper,
    PiValidator,
    PiStdlib,
    PiWriter,
    LanguageEnvironment
} from "@projectit/core";
import { LIonCoreActions, initializeEditorDef, initializeProjections } from "../../editor/gen";
import { LIonCoreScoper } from "../../scoper/gen/LIonCoreScoper";
import { initializeScoperDef } from "../../scoper/gen/LIonCoreScoperDef";
import { LIonCoreTyper } from "../../typer/gen/LIonCoreTyper";
import { LIonCoreValidator } from "../../validator/gen/LIonCoreValidator";
import { LIonCoreStdlib } from "../../stdlib/gen/LIonCoreStdlib";
import { LIonCoreModelUnitWriter } from "../../writer/gen/LIonCoreModelUnitWriter";
import { LIonCoreModelUnitReader } from "../../reader/gen/LIonCoreModelUnitReader";
import { Metamodels, Metamodel, initializeLanguage } from "../../language/gen";

/**
 * Class LIonCoreEnvironment provides the link between all parts of the language environment.
 * It holds the currently used editor, scoper, typer, etc, thus providing an entry point for
 * for instance, the editor to find the right scoper, or for the validator to find the typer
 * to use.
 * This class uses the singleton pattern to ensure that only one instance of the class is present.
 */
export class LIonCoreEnvironment implements PiEnvironment {
    private static environment: PiEnvironment; // the only instance of this class

    /**
     * This method implements the singleton pattern
     */
    public static getInstance(): PiEnvironment {
        if (this.environment === undefined || this.environment === null) {
            this.environment = new LIonCoreEnvironment();
            LanguageEnvironment.setInstance(this.environment);
        }
        return this.environment;
    }

    /**
     * A private constructor, as demanded by the singleton pattern.
     */
    private constructor() {
        const actions = new LIonCoreActions();
        const rootProjection = new PiCompositeProjection("root");
        initializeProjections(rootProjection);
        this.editor = new PiEditor(rootProjection, actions);
        this.editor.rootElement = null;
        this.editor.environment = this;
        initializeLanguage();
        initializeEditorDef();
        initializeScoperDef();
    }

    /**
     * Returns a new model with name 'modelName'.
     *
     * @param modelName
     */
    newModel(modelName: string): Metamodels {
        const model = new Metamodels();
        model.name = modelName;
        return model;
    }

    // the parts of the language environment
    editor: PiEditor;
    scoper: PiScoper = new LIonCoreScoper();
    typer: PiTyper = new LIonCoreTyper();
    stdlib: PiStdlib = LIonCoreStdlib.getInstance();
    validator: PiValidator = new LIonCoreValidator();
    writer: PiWriter = new LIonCoreModelUnitWriter();
    reader: PiReader = new LIonCoreModelUnitReader();
    languageName: string = "LIonCore";
    unitNames: string[] = ["Metamodel"];
    fileExtensions: Map<string, string> = new Map([["Metamodel", "met"]]);
}
