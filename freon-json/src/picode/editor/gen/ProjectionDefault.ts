// Generated by the ProjectIt Language Generator.
import { observable, makeObservable } from "mobx";

import {
    PiProjection,
    PiElementReference,
    PiCompositeProjection,
    PiElement,
    LanguageEnvironment,
    PiTableDefinition,
    Box,
    BoxUtils,
    BoxFactory
} from "@projectit/core";

import {
    JsonFile,
    JsonString,
    JsonNumber,
    JsonUndefined,
    JsonNull,
    JsonArray,
    JsonObject,
    JsonKeyValuePair,
    JsonBoolean,
    JsonDirectory
} from "../../language/gen";

/**
 * Class ProjectionDefault implements the projections for elements of
 * language Json defined in the editor named default.
 * These are merged with the custom build additions and other definition-based editor parts
 * in a three-way manner. For each modelelement,
 * (1) if a custom build creator/behavior is present, this is used,
 * (2) if a creator/behavior based on one of the editor definition is present, this is used,
 * (3) if neither (1) nor (2) yields a result, the default is used.
 */
export class ProjectionDefault implements PiProjection {
    rootProjection: PiCompositeProjection;
    showBrackets: boolean = false;
    name: string = "default";
    isEnabled: boolean = true;

    constructor() {
        makeObservable(this, {
            showBrackets: observable,
            isEnabled: observable
        });
    }

    getBox(element: PiElement, nameOfSuper?: string): Box {
        if (element === null) {
            return null;
        }

        let boxType: string = element.piLanguageConcept();
        if (!!nameOfSuper && nameOfSuper.length > 0) {
            if (!this.rootProjection.checkSuper(nameOfSuper, element.piLanguageConcept())) {
                throw new Error(
                    `A box requested for '${nameOfSuper}', which is not a super class or interface of '${element.piLanguageConcept()}'`
                );
            } else {
                boxType = nameOfSuper;
            }
        }

        switch (boxType) {
            case "JsonFile":
                return this.getJsonFileBox(element as JsonFile);
            case "JsonString":
                return this.getJsonStringBox(element as JsonString);
            case "JsonNumber":
                return this.getJsonNumberBox(element as JsonNumber);
            case "JsonUndefined":
                return this.getJsonUndefinedBox(element as JsonUndefined);
            case "JsonNull":
                return this.getJsonNullBox(element as JsonNull);
            case "JsonArray":
                return this.getJsonArrayBox(element as JsonArray);
            case "JsonObject":
                return this.getJsonObjectBox(element as JsonObject);
            case "JsonKeyValuePair":
                return this.getJsonKeyValuePairBox(element as JsonKeyValuePair);
            case "JsonBoolean":
                return this.getJsonBooleanBox(element as JsonBoolean);
            case "JsonDirectory":
                return this.getJsonDirectoryBox(element as JsonDirectory);
        }
        // nothing fits
        throw new Error("No box defined for this expression:" + element.piId());
    }

    getTableDefinition(conceptName: string): PiTableDefinition {
        if (conceptName === null || conceptName.length === 0) {
            return null;
        }

        switch (conceptName) {
        }
        // nothing fits
        return null;
    }

    public getJsonFileBox(jsonfile: JsonFile): Box {
        return BoxFactory.verticalList(jsonfile, "JsonFile-overall", [
            BoxFactory.horizontalList(
                jsonfile,
                "JsonFile-hlist-line-0",
                [BoxUtils.labelBox(jsonfile, "file", "top-1-line-0-item-0"), BoxUtils.textBox(jsonfile, "name")],
                { selectable: true }
            ),
            BoxUtils.indentBox(jsonfile, 4, "1", BoxUtils.getBoxOrAlias(jsonfile, "contents", "JsonValue", this.rootProjection))
        ]);
    }
    public getJsonStringBox(jsonstring: JsonString): Box {
        return BoxFactory.horizontalList(
            jsonstring,
            "JsonString-hlist-line-0",
            [
                BoxUtils.labelBox(jsonstring, '"', "top-1-line-0-item-0"),
                BoxUtils.textBox(jsonstring, "value"),
                BoxUtils.labelBox(jsonstring, '"', "top-1-line-0-item-2")
            ],
            { selectable: true }
        );
    }
    public getJsonNumberBox(jsonnumber: JsonNumber): Box {
        return BoxUtils.textBox(jsonnumber, "value");
    }
    public getJsonUndefinedBox(jsonundefined: JsonUndefined): Box {
        return BoxUtils.labelBox(jsonundefined, "undefined", "top-1-line-0-item-0");
    }
    public getJsonNullBox(jsonnull: JsonNull): Box {
        return BoxUtils.labelBox(jsonnull, "null", "top-1-line-0-item-0");
    }
    public getJsonArrayBox(jsonarray: JsonArray): Box {
        return BoxFactory.horizontalList(
            jsonarray,
            "JsonArray-hlist-line-0",
            [
                BoxUtils.labelBox(jsonarray, "[", "top-1-line-0-item-0"),
                BoxUtils.horizontalPartListBox(jsonarray, "members", this.rootProjection, { text: ",", type: "Separator" }),
                BoxUtils.labelBox(jsonarray, "]", "top-1-line-0-item-2")
            ],
            { selectable: true }
        );
    }
    public getJsonObjectBox(jsonobject: JsonObject): Box {
        return BoxFactory.verticalList(jsonobject, "JsonObject-overall", [
            BoxUtils.labelBox(jsonobject, "{", "top-1-line-0-item-0"),
            BoxUtils.indentBox(
                jsonobject,
                4,
                "1",
                BoxUtils.verticalPartListBox(jsonobject, "pairs", this.rootProjection, { text: ",", type: "Separator" })
            ),
            BoxUtils.labelBox(jsonobject, "}", "top-1-line-2-item-0")
        ]);
    }
    public getJsonKeyValuePairBox(jsonkeyvaluepair: JsonKeyValuePair): Box {
        return BoxFactory.horizontalList(
            jsonkeyvaluepair,
            "JsonKeyValuePair-hlist-line-0",
            [
                BoxUtils.labelBox(jsonkeyvaluepair, '"', "top-1-line-0-item-0"),
                BoxUtils.textBox(jsonkeyvaluepair, "key"),
                BoxUtils.labelBox(jsonkeyvaluepair, '":', "top-1-line-0-item-2"),
                BoxUtils.getBoxOrAlias(jsonkeyvaluepair, "value", "JsonValue", this.rootProjection)
            ],
            { selectable: true }
        );
    }
    public getJsonBooleanBox(jsonboolean: JsonBoolean): Box {
        return BoxUtils.booleanBox(jsonboolean, "value", { yes: "true", no: "false" });
    }
    public getJsonDirectoryBox(jsondirectory: JsonDirectory): Box {
        return BoxFactory.verticalList(jsondirectory, "JsonDirectory-overall", [
            BoxFactory.horizontalList(
                jsondirectory,
                "JsonDirectory-hlist-line-0",
                [BoxUtils.labelBox(jsondirectory, "directory", "top-1-line-0-item-0"), BoxUtils.textBox(jsondirectory, "name")],
                { selectable: true }
            ),
            BoxUtils.indentBox(jsondirectory, 4, "1", BoxUtils.verticalPartListBox(jsondirectory, "files", this.rootProjection, null))
        ]);
    }
}
