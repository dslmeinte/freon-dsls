// Generated by the ProjectIt Language Generator.
// This file contains the input to the AGL parser generator
// (see https://https://github.com/dhakehurst/net.akehurst.language).
// The grammar in this file is read by JsonModelUnitReader

export const JsonGrammarStr = `
namespace JsonLanguage
grammar JsonGrammar {
                
// rules for "JsonDirectory"
JsonDirectory = 'directory' identifier
	 JsonFile* ;

JsonFile = 'file' identifier
	 JsonValue ;

JsonString = '\"' stringLiteral '\"' ;

JsonNumber = stringLiteral ;

JsonUndefined = 'undefined' ;

JsonNull = 'null' ;

JsonArray = '[' [ JsonValue / ',' ]* ']' ;

JsonObject = '\{'
	 [ JsonKeyValuePair / ',' ]*
	 '}' ;

JsonKeyValuePair = '\"' stringLiteral '\":' JsonValue ;

JsonBoolean = booleanLiteral ;

JsonValue = JsonUndefined 
    | JsonNull 
    | JsonArray 
    | JsonObject 
    | JsonString 
    | JsonNumber 
    | JsonBoolean  ;

// common rules   

__pi_reference = [ identifier / '.' ]+ ;
        
// white space and comments
skip WHITE_SPACE = "\\s+" ;
skip SINGLE_LINE_COMMENT = "//[^\\r\\n]*" ;
skip MULTI_LINE_COMMENT = "/\\*[^*]*\\*+(?:[^*/][^*]*\\*+)*/" ;
        
// the predefined basic types   
leaf identifier          = "[a-zA-Z_][a-zA-Z0-9_]*" ;
/* see https://stackoverflow.com/questions/37032620/regex-for-matching-a-string-literal-in-java */
leaf stringLiteral       = '"' "[^\\"\\\\]*(\\\\.[^\\"\\\\]*)*" '"' ;
leaf numberLiteral       = "[0-9]+";
leaf booleanLiteral      = 'false' | 'true';
            
}`; // end of grammar
