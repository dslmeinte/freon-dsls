// Generated by the ProjectIt Language Generator.
import {
    JsonArray,
    JsonBoolean,
    JsonDirectory,
    JsonFile,
    JsonFiles,
    JsonKeyValuePair,
    JsonNull,
    JsonNumber,
    JsonObject,
    JsonString,
    JsonUndefined,
    JsonValue
} from "../../language/gen";
import { JsonWorker } from "./JsonWorker";

/**
 * Class JsonDefaultWorker is part of the implementation of the visitor pattern on models.
 * It implements the interface JsonWorker with empty methods, and can thus be used as
 * base to any class that needs to traverse the model tree.
 * Class JsonWalker implements the traversal of the model tree. This class implements
 * the actual visiting of each node in the tree.
 */
export class JsonDefaultWorker implements JsonWorker {
    /**
     * Visits 'modelelement' before visiting its children.
     * @param modelelement
     */
    public execBeforeJsonFiles(modelelement: JsonFiles): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' after visiting its children.
     * @param modelelement
     */
    public execAfterJsonFiles(modelelement: JsonFiles): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' before visiting its children.
     * @param modelelement
     */
    public execBeforeJsonDirectory(modelelement: JsonDirectory): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' after visiting its children.
     * @param modelelement
     */
    public execAfterJsonDirectory(modelelement: JsonDirectory): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' before visiting its children.
     * @param modelelement
     */
    public execBeforeJsonFile(modelelement: JsonFile): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' after visiting its children.
     * @param modelelement
     */
    public execAfterJsonFile(modelelement: JsonFile): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' before visiting its children.
     * @param modelelement
     */
    public execBeforeJsonValue(modelelement: JsonValue): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' after visiting its children.
     * @param modelelement
     */
    public execAfterJsonValue(modelelement: JsonValue): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' before visiting its children.
     * @param modelelement
     */
    public execBeforeJsonString(modelelement: JsonString): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' after visiting its children.
     * @param modelelement
     */
    public execAfterJsonString(modelelement: JsonString): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' before visiting its children.
     * @param modelelement
     */
    public execBeforeJsonNumber(modelelement: JsonNumber): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' after visiting its children.
     * @param modelelement
     */
    public execAfterJsonNumber(modelelement: JsonNumber): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' before visiting its children.
     * @param modelelement
     */
    public execBeforeJsonUndefined(modelelement: JsonUndefined): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' after visiting its children.
     * @param modelelement
     */
    public execAfterJsonUndefined(modelelement: JsonUndefined): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' before visiting its children.
     * @param modelelement
     */
    public execBeforeJsonNull(modelelement: JsonNull): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' after visiting its children.
     * @param modelelement
     */
    public execAfterJsonNull(modelelement: JsonNull): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' before visiting its children.
     * @param modelelement
     */
    public execBeforeJsonArray(modelelement: JsonArray): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' after visiting its children.
     * @param modelelement
     */
    public execAfterJsonArray(modelelement: JsonArray): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' before visiting its children.
     * @param modelelement
     */
    public execBeforeJsonObject(modelelement: JsonObject): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' after visiting its children.
     * @param modelelement
     */
    public execAfterJsonObject(modelelement: JsonObject): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' before visiting its children.
     * @param modelelement
     */
    public execBeforeJsonKeyValuePair(modelelement: JsonKeyValuePair): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' after visiting its children.
     * @param modelelement
     */
    public execAfterJsonKeyValuePair(modelelement: JsonKeyValuePair): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' before visiting its children.
     * @param modelelement
     */
    public execBeforeJsonBoolean(modelelement: JsonBoolean): boolean {
        return false;
    }

    /**
     * Visits 'modelelement' after visiting its children.
     * @param modelelement
     */
    public execAfterJsonBoolean(modelelement: JsonBoolean): boolean {
        return false;
    }
}
