// Generated by the ProjectIt Language Generator.
import { PiElement, PiType, PiTyper, PiTyperPart } from "@projectit/core";
import { JsonTyper } from "./JsonTyper";

export class JsonTyperPart implements PiTyperPart {
    mainTyper: JsonTyper;

    /**
     * Returns true if 'modelelement' is marked as 'type' in the Typer definition.
     * @param modelelement
     */
    public isType(modelelement: PiElement): boolean | null {
        return false;
    }

    /**
     * Returns the type of 'modelelement' according to the type rules in the Typer Definition.
     * @param modelelement
     */
    public inferType(modelelement: PiElement): PiType | null {
        return null;
    }

    /**
     * Returns true if type1 equals type2.
     * This is a strict equal.
     * @param type1
     * @param type2
     */
    public equals(type1: PiType, type2: PiType): boolean | null {
        return false;
    }

    /**
     * Returns true if type1 conforms to type2. The direction is type1 conforms to type2.
     * @param type1
     * @param type2
     */
    public conforms(type1: PiType, type2: PiType): boolean | null {
        return false;
    }

    /**
     * Returns true if all types in typelist1 conform to the types in typelist2, in the given order.
     * @param typelist1
     * @param typelist2
     */
    public conformsList(typelist1: PiType[], typelist2: PiType[]): boolean | null {
        return false;
    }

    /**
     * Returns the common super type of all types in typelist
     * @param typelist
     */
    public commonSuper(typelist: PiType[]): PiType | null {
        return null;
    }

    /**
     * Returns all super types as defined in the typer definition.
     * @param type
     */
    public getSuperTypes(type: PiType): PiType[] | null {
        return [];
    }
}
