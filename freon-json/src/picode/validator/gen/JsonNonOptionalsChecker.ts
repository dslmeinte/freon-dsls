// Generated by the ProjectIt Language Generator.
import { PiError, PiErrorSeverity, PiWriter, LanguageEnvironment } from "@projectit/core";
import {
    JsonDirectory,
    JsonFile,
    JsonValue,
    JsonString,
    JsonNumber,
    JsonUndefined,
    JsonNull,
    JsonArray,
    JsonObject,
    JsonKeyValuePair,
    JsonBoolean,
    JsonFiles
} from "../../language/gen";
import { JsonDefaultWorker } from "../../utils/gen";
import { JsonCheckerInterface } from "./JsonValidator";

/**
 * Class JsonNonOptionalsChecker is part of the implementation of the default validator.
 * It checks whether non-optional properties, as such defined in the .ast definition, indeed
 * have a value.
 * Class JsonWalker implements the traversal of the model tree. This class implements
 * the actual checking of each node in the tree.
 */
export class JsonNonOptionalsChecker extends JsonDefaultWorker implements JsonCheckerInterface {
    // 'myWriter' is used to provide error messages on the nodes in the model tree
    myWriter: PiWriter = LanguageEnvironment.getInstance().writer;
    // 'errorList' holds the errors found while traversing the model tree
    errorList: PiError[] = [];

    /**
     * Checks 'modelelement' before checking its children.
     * Found errors are pushed onto 'errorlist'.
     * If an error is found, it is considered 'fatal', which means that no other checks on
     * 'modelelement' are performed.
     *
     * @param modelelement
     */
    public execBeforeJsonFiles(modelelement: JsonFiles): boolean {
        let hasFatalError: boolean = false;
        if (modelelement.name === null || modelelement.name === undefined || modelelement.name?.length == 0) {
            hasFatalError = true;
            this.errorList.push(new PiError("Property 'name' must have a value", modelelement, modelelement.name, PiErrorSeverity.Error));
        }

        return hasFatalError;
    }

    /**
     * Checks 'modelelement' before checking its children.
     * Found errors are pushed onto 'errorlist'.
     * If an error is found, it is considered 'fatal', which means that no other checks on
     * 'modelelement' are performed.
     *
     * @param modelelement
     */
    public execBeforeJsonDirectory(modelelement: JsonDirectory): boolean {
        let hasFatalError: boolean = false;
        if (modelelement.name === null || modelelement.name === undefined || modelelement.name?.length == 0) {
            hasFatalError = true;
            this.errorList.push(new PiError("Property 'name' must have a value", modelelement, modelelement.name, PiErrorSeverity.Error));
        }

        return hasFatalError;
    }

    /**
     * Checks 'modelelement' before checking its children.
     * Found errors are pushed onto 'errorlist'.
     * If an error is found, it is considered 'fatal', which means that no other checks on
     * 'modelelement' are performed.
     *
     * @param modelelement
     */
    public execBeforeJsonFile(modelelement: JsonFile): boolean {
        let hasFatalError: boolean = false;
        if (modelelement.name === null || modelelement.name === undefined || modelelement.name?.length == 0) {
            hasFatalError = true;
            this.errorList.push(new PiError("Property 'name' must have a value", modelelement, modelelement.name, PiErrorSeverity.Error));
        }
        if (modelelement.contents === null || modelelement.contents === undefined) {
            hasFatalError = true;
            this.errorList.push(
                new PiError("Property 'contents' must have a value", modelelement, modelelement.name, PiErrorSeverity.Error)
            );
        }

        return hasFatalError;
    }

    /**
     * Checks 'modelelement' before checking its children.
     * Found errors are pushed onto 'errorlist'.
     * If an error is found, it is considered 'fatal', which means that no other checks on
     * 'modelelement' are performed.
     *
     * @param modelelement
     */
    public execBeforeJsonString(modelelement: JsonString): boolean {
        let hasFatalError: boolean = false;
        if (modelelement.value === null || modelelement.value === undefined || modelelement.value?.length == 0) {
            hasFatalError = true;
            this.errorList.push(new PiError("Property 'value' must have a value", modelelement, "unnamed", PiErrorSeverity.Error));
        }

        return hasFatalError;
    }

    /**
     * Checks 'modelelement' before checking its children.
     * Found errors are pushed onto 'errorlist'.
     * If an error is found, it is considered 'fatal', which means that no other checks on
     * 'modelelement' are performed.
     *
     * @param modelelement
     */
    public execBeforeJsonNumber(modelelement: JsonNumber): boolean {
        let hasFatalError: boolean = false;
        if (modelelement.value === null || modelelement.value === undefined || modelelement.value?.length == 0) {
            hasFatalError = true;
            this.errorList.push(new PiError("Property 'value' must have a value", modelelement, "unnamed", PiErrorSeverity.Error));
        }

        return hasFatalError;
    }

    /**
     * Checks 'modelelement' before checking its children.
     * Found errors are pushed onto 'errorlist'.
     * If an error is found, it is considered 'fatal', which means that no other checks on
     * 'modelelement' are performed.
     *
     * @param modelelement
     */
    public execBeforeJsonKeyValuePair(modelelement: JsonKeyValuePair): boolean {
        let hasFatalError: boolean = false;
        if (modelelement.key === null || modelelement.key === undefined || modelelement.key?.length == 0) {
            hasFatalError = true;
            this.errorList.push(new PiError("Property 'key' must have a value", modelelement, "unnamed", PiErrorSeverity.Error));
        }
        if (modelelement.value === null || modelelement.value === undefined) {
            hasFatalError = true;
            this.errorList.push(new PiError("Property 'value' must have a value", modelelement, "unnamed", PiErrorSeverity.Error));
        }

        return hasFatalError;
    }

    /**
     * Checks 'modelelement' before checking its children.
     * Found errors are pushed onto 'errorlist'.
     * If an error is found, it is considered 'fatal', which means that no other checks on
     * 'modelelement' are performed.
     *
     * @param modelelement
     */
    public execBeforeJsonBoolean(modelelement: JsonBoolean): boolean {
        let hasFatalError: boolean = false;
        if (modelelement.value === null || modelelement.value === undefined) {
            hasFatalError = true;
            this.errorList.push(new PiError("Property 'value' must have a value", modelelement, "unnamed", PiErrorSeverity.Error));
        }

        return hasFatalError;
    }
}
