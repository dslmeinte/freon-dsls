// Generated by the ProjectIt Language Generator.
import {
    MobxModelElementImpl,
    PiElement,
    PiUtils,
    PiParseLocation,
    matchElementList,
    matchPrimitiveList,
    matchReferenceList
} from "@projectit/core";
import { JsonMetaType } from "./internal";

/**
 * Class JsonValue is the implementation of the concept with the same name in the language definition file.
 * It uses mobx decorators to enable parts of the language environment, e.g. the editor, to react
 * to changes in the state of its properties.
 */
export abstract class JsonValue extends MobxModelElementImpl implements PiElement {
    readonly $typename: JsonMetaType = "JsonValue"; // holds the metatype in the form of a string
    $id: string; // a unique identifier
    parse_location: PiParseLocation; // if relevant, the location of this element within the source from which it is parsed

    constructor(id?: string) {
        super();
        if (!!id) {
            this.$id = id;
        } else {
            this.$id = PiUtils.ID(); // uuid.v4();
        }
    }

    /**
     * Returns the metatype of this instance in the form of a string.
     */
    piLanguageConcept(): JsonMetaType {
        return this.$typename;
    }

    /**
     * Returns the unique identifier of this instance.
     */
    piId(): string {
        return this.$id;
    }

    /**
     * Returns true if this instance is a model concept.
     */
    piIsModel(): boolean {
        return false;
    }

    /**
     * Returns true if this instance is a model unit.
     */
    piIsUnit(): boolean {
        return false;
    }

    /**
     * Returns true if this instance is an expression concept.
     */
    piIsExpression(): boolean {
        return false;
    }

    /**
     * Returns true if this instance is a binary expression concept.
     */
    piIsBinaryExpression(): boolean {
        return false;
    }
    /**
     * Matches a partial instance of this class to this object
     * based on the properties defined in the partial.
     * @param toBeMatched
     */
    public match(toBeMatched: Partial<JsonValue>): boolean {
        let result: boolean = true;

        return result;
    }
}
