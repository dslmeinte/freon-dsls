// Generated by the ProjectIt Language Generator.
import { Language, Model, ModelUnit, Property, Concept, Interface, PiElementReference } from "@projectit/core";

import {
    JsonFiles,
    JsonDirectory,
    JsonFile,
    JsonValue,
    JsonString,
    JsonNumber,
    JsonUndefined,
    JsonNull,
    JsonArray,
    JsonObject,
    JsonKeyValuePair,
    JsonBoolean
} from "./internal";

/**
 * Creates an in-memory representation of structure of the language metamodel, used in e.g. the (de)serializer.
 */
export function initializeLanguage() {
    Language.getInstance().name = "Json";
    Language.getInstance().addModel(describeJsonFiles());
    Language.getInstance().addUnit(describeJsonDirectory());
    Language.getInstance().addConcept(describeJsonFile());
    Language.getInstance().addConcept(describeJsonValue());
    Language.getInstance().addConcept(describeJsonString());
    Language.getInstance().addConcept(describeJsonNumber());
    Language.getInstance().addConcept(describeJsonUndefined());
    Language.getInstance().addConcept(describeJsonNull());
    Language.getInstance().addConcept(describeJsonArray());
    Language.getInstance().addConcept(describeJsonObject());
    Language.getInstance().addConcept(describeJsonKeyValuePair());
    Language.getInstance().addConcept(describeJsonBoolean());

    Language.getInstance().addReferenceCreator((name: string, type: string) => {
        return !!name ? PiElementReference.create(name, type) : null;
    });
}

function describeJsonFiles(): Model {
    const model = {
        typeName: "JsonFiles",
        isNamespace: true,
        constructor: () => {
            return new JsonFiles();
        },
        properties: new Map<string, Property>()
    };
    model.properties.set("name", {
        name: "name",
        type: "string",
        isList: false,
        isPublic: true,
        propertyKind: "primitive"
    });
    model.properties.set("dirs", {
        name: "dirs",
        type: "JsonDirectory",
        isList: true,
        isPublic: true,
        propertyKind: "part"
    });

    return model;
}

function describeJsonDirectory(): ModelUnit {
    const modelunit = {
        typeName: "JsonDirectory",
        isNamedElement: true,
        fileExtension: "jso",
        constructor: () => {
            return new JsonDirectory();
        },
        properties: new Map<string, Property>()
    };
    modelunit.properties.set("name", {
        name: "name",
        type: "string",
        isList: false,
        isPublic: true,
        propertyKind: "primitive"
    });
    modelunit.properties.set("files", {
        name: "files",
        type: "JsonFile",
        isList: true,
        isPublic: true,
        propertyKind: "part"
    });

    return modelunit;
}

function describeJsonFile(): Concept {
    const concept = {
        typeName: "JsonFile",
        isAbstract: false,
        isPublic: true,
        isNamedElement: true,
        trigger: "JsonFile",
        constructor: () => {
            return new JsonFile();
        },
        properties: new Map<string, Property>(),
        baseName: null,
        subConceptNames: []
    };
    concept.properties.set("name", {
        name: "name",
        type: "string",
        isList: false,
        isPublic: true,
        propertyKind: "primitive"
    });
    concept.properties.set("contents", {
        name: "contents",
        type: "JsonValue",
        isList: false,
        isPublic: true,
        propertyKind: "part"
    });

    return concept;
}

function describeJsonValue(): Concept {
    const concept = {
        typeName: "JsonValue",
        isAbstract: true,
        isPublic: undefined,
        isNamedElement: false,
        trigger: "JsonValue",
        constructor: () => {
            return null;
        },
        properties: new Map<string, Property>(),
        baseName: null,
        subConceptNames: ["JsonString", "JsonNumber", "JsonUndefined", "JsonNull", "JsonArray", "JsonObject", "JsonBoolean"]
    };

    return concept;
}

function describeJsonString(): Concept {
    const concept = {
        typeName: "JsonString",
        isAbstract: false,
        isPublic: true,
        isNamedElement: false,
        trigger: "JsonString",
        constructor: () => {
            return new JsonString();
        },
        properties: new Map<string, Property>(),
        baseName: "JsonValue",
        subConceptNames: []
    };
    concept.properties.set("value", {
        name: "value",
        type: "string",
        isList: false,
        isPublic: true,
        propertyKind: "primitive"
    });

    return concept;
}

function describeJsonNumber(): Concept {
    const concept = {
        typeName: "JsonNumber",
        isAbstract: false,
        isPublic: true,
        isNamedElement: false,
        trigger: "JsonNumber",
        constructor: () => {
            return new JsonNumber();
        },
        properties: new Map<string, Property>(),
        baseName: "JsonValue",
        subConceptNames: []
    };
    concept.properties.set("value", {
        name: "value",
        type: "string",
        isList: false,
        isPublic: true,
        propertyKind: "primitive"
    });

    return concept;
}

function describeJsonUndefined(): Concept {
    const concept = {
        typeName: "JsonUndefined",
        isAbstract: false,
        isPublic: undefined,
        isNamedElement: false,
        trigger: "JsonUndefined",
        constructor: () => {
            return new JsonUndefined();
        },
        properties: new Map<string, Property>(),
        baseName: "JsonValue",
        subConceptNames: []
    };

    return concept;
}

function describeJsonNull(): Concept {
    const concept = {
        typeName: "JsonNull",
        isAbstract: false,
        isPublic: undefined,
        isNamedElement: false,
        trigger: "JsonNull",
        constructor: () => {
            return new JsonNull();
        },
        properties: new Map<string, Property>(),
        baseName: "JsonValue",
        subConceptNames: []
    };

    return concept;
}

function describeJsonArray(): Concept {
    const concept = {
        typeName: "JsonArray",
        isAbstract: false,
        isPublic: true,
        isNamedElement: false,
        trigger: "JsonArray",
        constructor: () => {
            return new JsonArray();
        },
        properties: new Map<string, Property>(),
        baseName: "JsonValue",
        subConceptNames: []
    };

    concept.properties.set("members", {
        name: "members",
        type: "JsonValue",
        isList: true,
        isPublic: true,
        propertyKind: "part"
    });

    return concept;
}

function describeJsonObject(): Concept {
    const concept = {
        typeName: "JsonObject",
        isAbstract: false,
        isPublic: true,
        isNamedElement: false,
        trigger: "JsonObject",
        constructor: () => {
            return new JsonObject();
        },
        properties: new Map<string, Property>(),
        baseName: "JsonValue",
        subConceptNames: []
    };

    concept.properties.set("pairs", {
        name: "pairs",
        type: "JsonKeyValuePair",
        isList: true,
        isPublic: true,
        propertyKind: "part"
    });

    return concept;
}

function describeJsonKeyValuePair(): Concept {
    const concept = {
        typeName: "JsonKeyValuePair",
        isAbstract: false,
        isPublic: true,
        isNamedElement: false,
        trigger: "JsonKeyValuePair",
        constructor: () => {
            return new JsonKeyValuePair();
        },
        properties: new Map<string, Property>(),
        baseName: null,
        subConceptNames: []
    };
    concept.properties.set("key", {
        name: "key",
        type: "string",
        isList: false,
        isPublic: true,
        propertyKind: "primitive"
    });
    concept.properties.set("value", {
        name: "value",
        type: "JsonValue",
        isList: false,
        isPublic: true,
        propertyKind: "part"
    });

    return concept;
}

function describeJsonBoolean(): Concept {
    const concept = {
        typeName: "JsonBoolean",
        isAbstract: false,
        isPublic: true,
        isNamedElement: false,
        trigger: "JsonBoolean",
        constructor: () => {
            return new JsonBoolean();
        },
        properties: new Map<string, Property>(),
        baseName: "JsonValue",
        subConceptNames: []
    };
    concept.properties.set("value", {
        name: "value",
        type: "boolean",
        isList: false,
        isPublic: true,
        propertyKind: "primitive"
    });

    return concept;
}
