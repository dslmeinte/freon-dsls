// Generated by the ProjectIt Language Generator.
import { observable, makeObservable } from "mobx";
import { PiElement, PiUtils, PiParseLocation, matchElementList, matchPrimitiveList, matchReferenceList } from "@projectit/core";
import { JsonValue, JsonMetaType } from "./internal";

/**
 * Class JsonBoolean is the implementation of the concept with the same name in the language definition file.
 * It uses mobx decorators to enable parts of the language environment, e.g. the editor, to react
 * to changes in the state of its properties.
 */
export class JsonBoolean extends JsonValue implements PiElement {
    /**
     * A convenience method that creates an instance of this class
     * based on the properties defined in 'data'.
     * @param data
     */
    static create(data: Partial<JsonBoolean>): JsonBoolean {
        const result = new JsonBoolean();
        if (!!data.value) {
            result.value = data.value;
        }
        if (!!data.parse_location) {
            result.parse_location = data.parse_location;
        }
        return result;
    }

    readonly $typename: JsonMetaType = "JsonBoolean"; // holds the metatype in the form of a string

    parse_location: PiParseLocation; // if relevant, the location of this element within the source from which it is parsed
    value: boolean = false; // implementation of value

    constructor(id?: string) {
        super(id);
        makeObservable(this, { value: observable });
    }

    /**
     * Returns the metatype of this instance in the form of a string.
     */
    piLanguageConcept(): JsonMetaType {
        return this.$typename;
    }

    /**
     * Returns true if this instance is a model concept.
     */
    piIsModel(): boolean {
        return false;
    }

    /**
     * Returns true if this instance is a model unit.
     */
    piIsUnit(): boolean {
        return false;
    }

    /**
     * Returns true if this instance is an expression concept.
     */
    piIsExpression(): boolean {
        return false;
    }

    /**
     * Returns true if this instance is a binary expression concept.
     */
    piIsBinaryExpression(): boolean {
        return false;
    }
    /**
     * Matches a partial instance of this class to this object
     * based on the properties defined in the partial.
     * @param toBeMatched
     */
    public match(toBeMatched: Partial<JsonBoolean>): boolean {
        let result: boolean = super.match(toBeMatched);
        if (result && toBeMatched.value !== null && toBeMatched.value !== undefined) {
            result = result && this.value === toBeMatched.value;
        }
        return result;
    }
}
